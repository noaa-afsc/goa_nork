[
  {
    "objectID": "tables.html",
    "href": "tables.html",
    "title": "Comparison tables",
    "section": "",
    "text": "The ADMB model estimates a maturity ogive, that adds uncertainty to the estimates of spawning biomass, it is removed in the RTMB model to allow flexibility for future explorations on skip spawning. Therefore, there are no maturity likelihood components in the RTMB model.\n\n\n\n\n\nItem\nRTMB\nADMB\ndiff\n\n\n\n\nCatch\n0.109064\n0.109069\n0.000005\n\n\nSurvey\n2.055860\n2.055860\n0.000000\n\n\nFish age\n41.843576\n41.846300\n0.002724\n\n\nSurvey age\n83.067994\n83.068300\n0.000306\n\n\nFish size\n70.213770\n70.213700\n-0.000070\n\n\nRecruitment\n9.312465\n9.312490\n0.000025\n\n\nF regularity\n5.675771\n5.675790\n0.000019\n\n\nSPR penalty\n0.000000\n0.000000\n0.000000\n\n\nM prior\n0.012023\n0.012023\n0.000000\n\n\nq prior\n0.006286\n0.006284\n-0.000002\n\n\nSub total\n212.296800\n212.299815\n0.003015\n\n\nL maturity\nNA\n23.501200\nNA\n\n\nC maturity\nNA\n46.726500\nNA\n\n\nSum maturity\nNA\n70.227700\nNA"
  },
  {
    "objectID": "tables.html#comparing-likelihood-values-between-the-two-models.",
    "href": "tables.html#comparing-likelihood-values-between-the-two-models.",
    "title": "Comparison tables",
    "section": "",
    "text": "The ADMB model estimates a maturity ogive, that adds uncertainty to the estimates of spawning biomass, it is removed in the RTMB model to allow flexibility for future explorations on skip spawning. Therefore, there are no maturity likelihood components in the RTMB model.\n\n\n\n\n\nItem\nRTMB\nADMB\ndiff\n\n\n\n\nCatch\n0.109064\n0.109069\n0.000005\n\n\nSurvey\n2.055860\n2.055860\n0.000000\n\n\nFish age\n41.843576\n41.846300\n0.002724\n\n\nSurvey age\n83.067994\n83.068300\n0.000306\n\n\nFish size\n70.213770\n70.213700\n-0.000070\n\n\nRecruitment\n9.312465\n9.312490\n0.000025\n\n\nF regularity\n5.675771\n5.675790\n0.000019\n\n\nSPR penalty\n0.000000\n0.000000\n0.000000\n\n\nM prior\n0.012023\n0.012023\n0.000000\n\n\nq prior\n0.006286\n0.006284\n-0.000002\n\n\nSub total\n212.296800\n212.299815\n0.003015\n\n\nL maturity\nNA\n23.501200\nNA\n\n\nC maturity\nNA\n46.726500\nNA\n\n\nSum maturity\nNA\n70.227700\nNA"
  },
  {
    "objectID": "tables.html#comparing-parameter-and-projection-values-between-the-two-models.",
    "href": "tables.html#comparing-parameter-and-projection-values-between-the-two-models.",
    "title": "Comparison tables",
    "section": "Comparing parameter and projection values between the two models.",
    "text": "Comparing parameter and projection values between the two models.\n\n\n\n\n\nItem\nRTMB\nADMB\ndiff\n\n\n\n\nM\n0.0595\n0.0595\n0.0000\n\n\nq\n0.9508\n0.9508\n0.0000\n\n\nLog mean recruitment\n3.5243\n3.5243\n0.0000\n\n\nLog mean F\n-3.6554\n-3.6554\n0.0000\n\n\nA50 fishery\n8.1675\n8.1675\n0.0000\n\n\nDelta fishery\n1.8762\n1.8762\n0.0000\n\n\nA50 survey\n9.0233\n9.0233\n0.0000\n\n\nDelta survey\n4.2171\n4.2171\n0.0000\n\n\n2023 Total biomass\n101794.4632\n101794.0000\n-0.4632\n\n\n2023 Spawning biomass\n42811.0386\n42810.6000\n-0.4386\n\n\n2023 OFL\n6376.0034\n6375.9400\n-0.0634\n\n\n2023 FOFL\n0.0732\n0.0732\n0.0000\n\n\n2023 ABC\n5343.2967\n5343.2400\n-0.0567\n\n\n2023 FABC\n0.0610\n0.0610\n0.0000"
  },
  {
    "objectID": "rtmb.html",
    "href": "rtmb.html",
    "title": "RTMB model",
    "section": "",
    "text": "Code\nf &lt;- function(pars) {\n  require(RTMB)\n  RTMB::getAll(pars, data)\n  \n  # setup -------------\n  # transform\n  M = exp(log_M)\n  a50C = exp(log_a50C)\n  a50S = exp(log_a50S)\n  q = exp(log_q)\n  F50 = exp(log_F50)\n  F40 = exp(log_F40)\n  F35 = exp(log_F35)\n  \n  # spawning adjustments\n  spawn_fract = (spawn_mo - 1) / 12\n  spawn_adj = exp(-M)^(spawn_fract)\n  # index values\n  A = nrow(age_error) # number of ages in model\n  A1 = length(ages) # number of ages in comps\n  T = sum(catch_ind)  # time (fishery years)\n  Ts = sum(srv_ind) # time (survey)\n  Tfa = sum(fish_age_ind) # time (fishery age comp) \n  Tsa = sum(srv_age_ind) # time (survey age comp) \n  Tfs = sum(fish_size_ind) # time (fishery size comp) \n  L = length(length_bins) # number of length bins\n  g = 0.00001 # small number\n\n  # containers ---------\n  slx = matrix(NA, A, 2) # selectivity - fishery and survey\n  Bat = Cat = Nat = Fat = Zat = Sat = matrix(0, A, T) \n  initNat = rep(0, A) \n  catch_pred = rep(0, T)\n  srv_pred = rep(0, Ts)\n  srv_var = rep(0,Ts)\n  fish_age_pred = matrix(0, A1, Tfa)\n  srv_age_pred = matrix(0, A1, Tsa)\n  fish_size_pred = matrix(0, L, Tfs)\n  spawn_bio = tot_bio = rep(0, T)\n  N_spr = sb_spr = matrix(1, A, 4)\n  \n  # priors -----------------\n  # admb priors do not include a constant that is in dnorm, so removing them\n  ll = dnorm(log(M), log(mean_M), cv_M, TRUE)\n  nll_M = -(ll + log(sqrt(2 * pi) * cv_M))\n  ll = dnorm(log(q), log(mean_q), cv_q, TRUE)\n  nll_q = -(ll + log(sqrt(2 * pi) * cv_q))\n  # nll_q = dnorm(q, mean_q, cv_q, TRUE)\n  # nll_sigmaR = dnorm(sigmaR, mean_sigmaR, cv_sigmaR, TRUE)\n  \n  # nll_M = (log_M - log(mean_M))^2 / (2 * cv_M^2)\n  # nll_q = (log_q - log(mean_q))^2 / (2 * cv_q^2)\n  nll_sigmaR = (log(sigmaR / mean_sigmaR))^2 / (2 * cv_sigmaR^2)\n  \n  # analysis ----------\n  ## selectivity ----\n  adj = ifelse(ages[1]&lt;=1, 1, ages[1]-1)\n  sel &lt;- function(a, a50, delta) {\n    1. / (1. + exp(-2.944438979 * ((a+adj) - a50) / delta))\n  }\n  \n  for(a in 1:A) {\n    slx[a,1] = sel(a, a50C, deltaC)\n    slx[a,2] = sel(a, a50S, deltaS)\n  }\n  \n  ## mortality ----\n  Ft = exp(log_mean_F + log_Ft)\n  for(t in 1:T){\n    for(a in 1:A) {\n      Fat[a,t] = Ft[t] * slx[a,1]\n      Zat[a,t] = Fat[a,t] + M\n      Sat[a,t] = exp(-Zat[a,t])\n    }\n  }\n  ## population ----\n  # not using this\n  ## Bzero\n  # initNat[1] = exp(log_mean_R)\n  # for (a in 2:A) {\n  #   initNat[a] &lt;- initNat[a-1] * exp(-M)\n  # }\n  # initNat[A] &lt;- initNat[A] / (1 - exp(-M))\n  # Bzero = sum(initNat * wt_mature * spawn_adj)\n  \n  ## Nat ----\n  # populate first row\n  # need to use correct log_Rt to match ADMB model (the init_log_Rt are in reverse order)\n  for(t in 1:T) {\n    Nat[1,t] = exp(log_mean_R + log_Rt[t])\n  }\n  # populate first column\n  for(a in 2:(A-1)) {\n    Nat[a,1] = exp(log_mean_R - (a-1) * M + init_log_Rt[a-1])\n  }\n  Nat[A,1] = exp(log_mean_R - (A-1) * M) / (1 - exp(-M))\n  \n  for(t in 2:T) {\n    for(a in 2:A) {\n      Nat[a,t] = Nat[a-1,t-1] * Sat[a-1,t-1]\n    }\n    Nat[A,t] = Nat[A,t] + Nat[A,t-1] * Sat[A,t-1]\n  }\n  \n  ### spawn_bio ----\n  for(t in 1:T) {\n    spawn_bio[t] = sum(Nat[,t] * wt_mature)\n    tot_bio[t] = sum(Nat[,t] * waa)\n  }\n  # flag - should be:\n  # spawn_bio[T] = sum(Nat[,T] * spawn_adj * wt_mature)\n  \n  \n  ## catch ----\n  for(t in 1:T){\n    for(a in 1:A){\n      Cat[a,t] = Fat[a,t] / Zat[a,t] * Nat[a,t] * (1.0 - Sat[a,t])\n    }\n    catch_pred[t] = sum(Cat[,t] * waa)\n  }\n  ssqcatch = sum(catch_wt * (log(catch_obs + g) - log(catch_pred + g))^2)\n  \n  ## survey biomass ----\n  isrv = 1\n  srv_like = 0.0\n  # survey biomass & likelihood\n  for(t in 1:T) {\n    if(srv_ind[t]==1) {\n      srv_pred[isrv] = sum(Nat[,t] * slx[,2] * waa) * q\n      srv_var[isrv] = sqrt(log(1 + srv_sd[isrv]^2 / srv_obs[isrv]^2))\n      srv_like = srv_like + log(srv_var[isrv]) + 0.5 * (log(srv_obs[isrv] / srv_pred[isrv]) / srv_var[isrv])^2;\n      \n      # srv_like = srv_like + sum((log(srv_obs[isrv]) - log(srv_pred[isrv]))^2 /\n      # (2 * (srv_sd[isrv] / srv_obs[isrv])^2))\n      # srv_like = srv_like + sum((srv_obs[isrv]-srv_pred[isrv])^2/ (2.*(srv_sd[isrv]^2)))\n      isrv = isrv + 1\n    }\n  }\n  like_srv = srv_like * srv_wt\n  \n  ## fishery age comp ----\n  fish_age_lk = 0.0\n  offset = 0.0\n  icomp = 1\n  for(t in 1:T) {\n    if(fish_age_ind[t] == 1) {\n      fish_age_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * age_error))\n      offset = offset - fish_age_iss[icomp] * sum((fish_age_obs[,icomp] + g) * \n              log(fish_age_obs[,icomp] + g))\n      fish_age_lk = fish_age_lk - sum(fish_age_iss[icomp] * (fish_age_obs[,icomp] + g) * \n              log(fish_age_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  fish_age_lk = fish_age_lk - offset\n  like_fish_age = fish_age_lk * fish_age_wt\n  \n  ## survey age comp ----\n  srv_age_lk = 0.0\n  offset_sa = 0.0\n  icomp = 1\n  for(t in 1:T) {\n    if(srv_age_ind[t] == 1) {\n      srv_age_pred[,icomp] = as.numeric(colSums((Nat[,t] * slx[,2]) / \n                                                sum(Nat[,t] * slx[,2]) * age_error))\n      offset_sa = offset_sa - srv_age_iss[icomp] * sum((srv_age_obs[,icomp] + g) * \n                        log(srv_age_obs[,icomp] + g))\n      srv_age_lk = srv_age_lk - srv_age_iss[icomp] * sum((srv_age_obs[,icomp] + g) * \n                        log(srv_age_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  srv_age_lk = srv_age_lk - offset_sa\n  like_srv_age = srv_age_lk * srv_age_wt\n  \n  ## fishery size comp ----\n  icomp = 1\n  fish_size_lk = 0.0\n  offset_fs = 0.0\n  for(t in 1:T) {\n    if(fish_size_ind[t] == 1) {\n      fish_size_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * size_age))\n      offset_fs = offset_fs - fish_size_iss[icomp] * sum((fish_size_obs[,icomp] + g) * \n                          log(fish_size_obs[,icomp] + g))\n      fish_size_lk = fish_size_lk - fish_size_iss[icomp] * sum((fish_size_obs[,icomp] + g) * \n                          log(fish_size_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  fish_size_lk = fish_size_lk - offset_fs\n  like_fish_size = fish_size_lk * fish_size_wt\n  \n  # SPR ------------------------\n  data.frame(log_Rt = log_Rt,\n             pred_rec = Nat[1,],\n             year = years) -&gt; df\n  # filter years 1979:\n  df = df[years&gt;=(1977+ages[1]) & years&lt;=(max(years)-ages[1]),]\n  pred_rec = mean(df$pred_rec)\n  stdev_rec = sqrt(sum((df$log_Rt - mean(df$log_Rt))^2) / (length(df$log_Rt) - 1))\n  recruits = Nat[1,]\n  for(a in 2:A) {\n    N_spr[a,1] = N_spr[a-1,1] * exp(-M)\n    N_spr[a,2] = N_spr[a-1,2] * exp(-(M + F50 * slx[a-1,1]))\n    N_spr[a,3] = N_spr[a-1,3] * exp(-(M + F40 * slx[a-1,1]))\n    N_spr[a,4] = N_spr[a-1,4] * exp(-(M + F35 * slx[a-1,1]))\n  }\n  # plus group\n  N_spr[A,1] = N_spr[A-1,1] * exp(-M) / (1 - exp(-M))\n  N_spr[A,2] = N_spr[A-1,2] * exp(-(M + F50 * slx[A-1,1])) / \n                      (1 - exp(-(M + F50 * slx[A,1])))\n  N_spr[A,3] = N_spr[A-1,3] * exp(-(M + F40 * slx[A-1,1])) / \n                      (1 - exp(-(M + F40 * slx[A,1])))\n  N_spr[A,4] = N_spr[A-1,4] * exp(-(M + F35 * slx[A-1,1])) / \n                      (1 - exp(-(M + F35 * slx[A,1])))\n  \n  # spawning spr\n  for(a in 1:A) {\n    sb_spr[a,1] = N_spr[a,1] * wt_mature[a] * exp(-spawn_fract * M)\n    sb_spr[a,2] = N_spr[a,2] * wt_mature[a] * exp(-spawn_fract * (M + F50 * slx[a,1]))\n    sb_spr[a,3] = N_spr[a,3] * wt_mature[a] * exp(-spawn_fract * (M + F40 * slx[a,1]))\n    sb_spr[a,4] = N_spr[a,4] * wt_mature[a] * exp(-spawn_fract * (M + F35 * slx[a,1]))\n  }\n  \n  # spr reference points\n  SB0 = sum(sb_spr[,1])\n  SBF50 = sum(sb_spr[,2])\n  SBF40 = sum(sb_spr[,3])\n  SBF35 = sum(sb_spr[,4])\n  \n  # spr penalities\n  sprpen = 100. * (SBF50 / SB0 - 0.5)^2\n  sprpen = sprpen + 100. * (SBF40 / SB0 - 0.4)^2\n  sprpen = sprpen + 100. * (SBF35 / SB0 - 0.35)^2\n  \n  # scale spr reference points\n  B0 = SB0 * pred_rec\n  B40 = SBF40 * pred_rec\n  B35 = SBF35 * pred_rec\n  \n  # likelihood/penalties --------------------\n  # like_rec = sum(log_Rt^2) / (2 * sigmaR^2) + length(log_Rt) * log(sigmaR) * wt_rec_var\n  # like_rec = sum((c(log_Rt, init_log_Rt) + sigmaR * sigmaR / 2)^2) / (2 * sigmaR^2)\n  like_rec = sum((c(log_Rt, init_log_Rt) + sigmaR * sigmaR / 2)^2) / (2 * sigmaR^2) * wt_rec_var\n  f_regularity = wt_fmort_reg * sum(log_Ft^2)\n  \n  nll = 0.0\n  nll = nll + ssqcatch\n  nll = nll + like_srv\n  nll = nll + like_fish_age\n  nll = nll + like_srv_age\n  nll = nll + like_fish_size\n  nll = nll + like_rec \n  nll = nll + f_regularity\n  nll = nll + nll_M\n  nll = nll + nll_q\n  nll = nll + nll_sigmaR\n  nll = nll + sprpen\n  \n  # reports -------------------\n  RTMB::REPORT(ages)\n  RTMB::REPORT(years)\n  RTMB::REPORT(M)\n  RTMB::REPORT(a50C)\n  RTMB::REPORT(deltaC)\n  RTMB::REPORT(a50S)\n  RTMB::REPORT(deltaS)\n  RTMB::REPORT(q)\n  RTMB::REPORT(sigmaR)\n  RTMB::REPORT(log_mean_R)\n  RTMB::REPORT(log_Rt)\n  RTMB::REPORT(log_mean_F)\n  RTMB::REPORT(log_Ft)\n  RTMB::REPORT(waa)\n  RTMB::REPORT(maa)\n  RTMB::REPORT(wt_mature)\n  RTMB::REPORT(yield_ratio)\n  RTMB::REPORT(Fat)\n  RTMB::REPORT(Zat)\n  RTMB::REPORT(Sat)\n  RTMB::REPORT(Cat)\n  RTMB::REPORT(Nat)\n  RTMB::REPORT(slx)\n  RTMB::REPORT(Ft)\n  RTMB::REPORT(catch_pred)\n  RTMB::REPORT(srv_pred)\n  \n  RTMB::REPORT(fish_age_pred)\n  RTMB::REPORT(srv_age_pred)\n  RTMB::REPORT(fish_size_pred)\n  \n  RTMB::REPORT(tot_bio)\n  RTMB::REPORT(spawn_bio)\n  RTMB::REPORT(recruits)\n  RTMB::ADREPORT(tot_bio)\n  RTMB::ADREPORT(spawn_bio)\n  RTMB::ADREPORT(recruits)\n  RTMB::REPORT(spawn_fract)\n  RTMB::REPORT(B0)\n  RTMB::REPORT(B40)\n  RTMB::REPORT(B35)\n  RTMB::REPORT(F35)\n  RTMB::REPORT(F40)\n  RTMB::REPORT(F50)\n  RTMB::REPORT(pred_rec)\n  RTMB::REPORT(stdev_rec)\n  \n  RTMB::REPORT(ssqcatch)\n  RTMB::REPORT(like_srv)\n  RTMB::REPORT(like_fish_age)\n  RTMB::REPORT(like_srv_age)\n  RTMB::REPORT(like_fish_size)\n  RTMB::REPORT(like_rec)\n  RTMB::REPORT(f_regularity)\n  RTMB::REPORT(sprpen)\n  RTMB::REPORT(nll_q)\n  RTMB::REPORT(nll_M)\n  RTMB::REPORT(nll_sigmaR)\n  RTMB::REPORT(nll)\n  # nll = 0.0\n  return(nll)\n}"
  },
  {
    "objectID": "rtmb.html#rtmb-model-code",
    "href": "rtmb.html#rtmb-model-code",
    "title": "RTMB model",
    "section": "",
    "text": "Code\nf &lt;- function(pars) {\n  require(RTMB)\n  RTMB::getAll(pars, data)\n  \n  # setup -------------\n  # transform\n  M = exp(log_M)\n  a50C = exp(log_a50C)\n  a50S = exp(log_a50S)\n  q = exp(log_q)\n  F50 = exp(log_F50)\n  F40 = exp(log_F40)\n  F35 = exp(log_F35)\n  \n  # spawning adjustments\n  spawn_fract = (spawn_mo - 1) / 12\n  spawn_adj = exp(-M)^(spawn_fract)\n  # index values\n  A = nrow(age_error) # number of ages in model\n  A1 = length(ages) # number of ages in comps\n  T = sum(catch_ind)  # time (fishery years)\n  Ts = sum(srv_ind) # time (survey)\n  Tfa = sum(fish_age_ind) # time (fishery age comp) \n  Tsa = sum(srv_age_ind) # time (survey age comp) \n  Tfs = sum(fish_size_ind) # time (fishery size comp) \n  L = length(length_bins) # number of length bins\n  g = 0.00001 # small number\n\n  # containers ---------\n  slx = matrix(NA, A, 2) # selectivity - fishery and survey\n  Bat = Cat = Nat = Fat = Zat = Sat = matrix(0, A, T) \n  initNat = rep(0, A) \n  catch_pred = rep(0, T)\n  srv_pred = rep(0, Ts)\n  srv_var = rep(0,Ts)\n  fish_age_pred = matrix(0, A1, Tfa)\n  srv_age_pred = matrix(0, A1, Tsa)\n  fish_size_pred = matrix(0, L, Tfs)\n  spawn_bio = tot_bio = rep(0, T)\n  N_spr = sb_spr = matrix(1, A, 4)\n  \n  # priors -----------------\n  # admb priors do not include a constant that is in dnorm, so removing them\n  ll = dnorm(log(M), log(mean_M), cv_M, TRUE)\n  nll_M = -(ll + log(sqrt(2 * pi) * cv_M))\n  ll = dnorm(log(q), log(mean_q), cv_q, TRUE)\n  nll_q = -(ll + log(sqrt(2 * pi) * cv_q))\n  # nll_q = dnorm(q, mean_q, cv_q, TRUE)\n  # nll_sigmaR = dnorm(sigmaR, mean_sigmaR, cv_sigmaR, TRUE)\n  \n  # nll_M = (log_M - log(mean_M))^2 / (2 * cv_M^2)\n  # nll_q = (log_q - log(mean_q))^2 / (2 * cv_q^2)\n  nll_sigmaR = (log(sigmaR / mean_sigmaR))^2 / (2 * cv_sigmaR^2)\n  \n  # analysis ----------\n  ## selectivity ----\n  adj = ifelse(ages[1]&lt;=1, 1, ages[1]-1)\n  sel &lt;- function(a, a50, delta) {\n    1. / (1. + exp(-2.944438979 * ((a+adj) - a50) / delta))\n  }\n  \n  for(a in 1:A) {\n    slx[a,1] = sel(a, a50C, deltaC)\n    slx[a,2] = sel(a, a50S, deltaS)\n  }\n  \n  ## mortality ----\n  Ft = exp(log_mean_F + log_Ft)\n  for(t in 1:T){\n    for(a in 1:A) {\n      Fat[a,t] = Ft[t] * slx[a,1]\n      Zat[a,t] = Fat[a,t] + M\n      Sat[a,t] = exp(-Zat[a,t])\n    }\n  }\n  ## population ----\n  # not using this\n  ## Bzero\n  # initNat[1] = exp(log_mean_R)\n  # for (a in 2:A) {\n  #   initNat[a] &lt;- initNat[a-1] * exp(-M)\n  # }\n  # initNat[A] &lt;- initNat[A] / (1 - exp(-M))\n  # Bzero = sum(initNat * wt_mature * spawn_adj)\n  \n  ## Nat ----\n  # populate first row\n  # need to use correct log_Rt to match ADMB model (the init_log_Rt are in reverse order)\n  for(t in 1:T) {\n    Nat[1,t] = exp(log_mean_R + log_Rt[t])\n  }\n  # populate first column\n  for(a in 2:(A-1)) {\n    Nat[a,1] = exp(log_mean_R - (a-1) * M + init_log_Rt[a-1])\n  }\n  Nat[A,1] = exp(log_mean_R - (A-1) * M) / (1 - exp(-M))\n  \n  for(t in 2:T) {\n    for(a in 2:A) {\n      Nat[a,t] = Nat[a-1,t-1] * Sat[a-1,t-1]\n    }\n    Nat[A,t] = Nat[A,t] + Nat[A,t-1] * Sat[A,t-1]\n  }\n  \n  ### spawn_bio ----\n  for(t in 1:T) {\n    spawn_bio[t] = sum(Nat[,t] * wt_mature)\n    tot_bio[t] = sum(Nat[,t] * waa)\n  }\n  # flag - should be:\n  # spawn_bio[T] = sum(Nat[,T] * spawn_adj * wt_mature)\n  \n  \n  ## catch ----\n  for(t in 1:T){\n    for(a in 1:A){\n      Cat[a,t] = Fat[a,t] / Zat[a,t] * Nat[a,t] * (1.0 - Sat[a,t])\n    }\n    catch_pred[t] = sum(Cat[,t] * waa)\n  }\n  ssqcatch = sum(catch_wt * (log(catch_obs + g) - log(catch_pred + g))^2)\n  \n  ## survey biomass ----\n  isrv = 1\n  srv_like = 0.0\n  # survey biomass & likelihood\n  for(t in 1:T) {\n    if(srv_ind[t]==1) {\n      srv_pred[isrv] = sum(Nat[,t] * slx[,2] * waa) * q\n      srv_var[isrv] = sqrt(log(1 + srv_sd[isrv]^2 / srv_obs[isrv]^2))\n      srv_like = srv_like + log(srv_var[isrv]) + 0.5 * (log(srv_obs[isrv] / srv_pred[isrv]) / srv_var[isrv])^2;\n      \n      # srv_like = srv_like + sum((log(srv_obs[isrv]) - log(srv_pred[isrv]))^2 /\n      # (2 * (srv_sd[isrv] / srv_obs[isrv])^2))\n      # srv_like = srv_like + sum((srv_obs[isrv]-srv_pred[isrv])^2/ (2.*(srv_sd[isrv]^2)))\n      isrv = isrv + 1\n    }\n  }\n  like_srv = srv_like * srv_wt\n  \n  ## fishery age comp ----\n  fish_age_lk = 0.0\n  offset = 0.0\n  icomp = 1\n  for(t in 1:T) {\n    if(fish_age_ind[t] == 1) {\n      fish_age_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * age_error))\n      offset = offset - fish_age_iss[icomp] * sum((fish_age_obs[,icomp] + g) * \n              log(fish_age_obs[,icomp] + g))\n      fish_age_lk = fish_age_lk - sum(fish_age_iss[icomp] * (fish_age_obs[,icomp] + g) * \n              log(fish_age_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  fish_age_lk = fish_age_lk - offset\n  like_fish_age = fish_age_lk * fish_age_wt\n  \n  ## survey age comp ----\n  srv_age_lk = 0.0\n  offset_sa = 0.0\n  icomp = 1\n  for(t in 1:T) {\n    if(srv_age_ind[t] == 1) {\n      srv_age_pred[,icomp] = as.numeric(colSums((Nat[,t] * slx[,2]) / \n                                                sum(Nat[,t] * slx[,2]) * age_error))\n      offset_sa = offset_sa - srv_age_iss[icomp] * sum((srv_age_obs[,icomp] + g) * \n                        log(srv_age_obs[,icomp] + g))\n      srv_age_lk = srv_age_lk - srv_age_iss[icomp] * sum((srv_age_obs[,icomp] + g) * \n                        log(srv_age_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  srv_age_lk = srv_age_lk - offset_sa\n  like_srv_age = srv_age_lk * srv_age_wt\n  \n  ## fishery size comp ----\n  icomp = 1\n  fish_size_lk = 0.0\n  offset_fs = 0.0\n  for(t in 1:T) {\n    if(fish_size_ind[t] == 1) {\n      fish_size_pred[,icomp] = as.numeric(colSums((Cat[,t] / sum(Cat[,t])) * size_age))\n      offset_fs = offset_fs - fish_size_iss[icomp] * sum((fish_size_obs[,icomp] + g) * \n                          log(fish_size_obs[,icomp] + g))\n      fish_size_lk = fish_size_lk - fish_size_iss[icomp] * sum((fish_size_obs[,icomp] + g) * \n                          log(fish_size_pred[,icomp] + g))\n      icomp = icomp + 1\n    }\n  }\n  fish_size_lk = fish_size_lk - offset_fs\n  like_fish_size = fish_size_lk * fish_size_wt\n  \n  # SPR ------------------------\n  data.frame(log_Rt = log_Rt,\n             pred_rec = Nat[1,],\n             year = years) -&gt; df\n  # filter years 1979:\n  df = df[years&gt;=(1977+ages[1]) & years&lt;=(max(years)-ages[1]),]\n  pred_rec = mean(df$pred_rec)\n  stdev_rec = sqrt(sum((df$log_Rt - mean(df$log_Rt))^2) / (length(df$log_Rt) - 1))\n  recruits = Nat[1,]\n  for(a in 2:A) {\n    N_spr[a,1] = N_spr[a-1,1] * exp(-M)\n    N_spr[a,2] = N_spr[a-1,2] * exp(-(M + F50 * slx[a-1,1]))\n    N_spr[a,3] = N_spr[a-1,3] * exp(-(M + F40 * slx[a-1,1]))\n    N_spr[a,4] = N_spr[a-1,4] * exp(-(M + F35 * slx[a-1,1]))\n  }\n  # plus group\n  N_spr[A,1] = N_spr[A-1,1] * exp(-M) / (1 - exp(-M))\n  N_spr[A,2] = N_spr[A-1,2] * exp(-(M + F50 * slx[A-1,1])) / \n                      (1 - exp(-(M + F50 * slx[A,1])))\n  N_spr[A,3] = N_spr[A-1,3] * exp(-(M + F40 * slx[A-1,1])) / \n                      (1 - exp(-(M + F40 * slx[A,1])))\n  N_spr[A,4] = N_spr[A-1,4] * exp(-(M + F35 * slx[A-1,1])) / \n                      (1 - exp(-(M + F35 * slx[A,1])))\n  \n  # spawning spr\n  for(a in 1:A) {\n    sb_spr[a,1] = N_spr[a,1] * wt_mature[a] * exp(-spawn_fract * M)\n    sb_spr[a,2] = N_spr[a,2] * wt_mature[a] * exp(-spawn_fract * (M + F50 * slx[a,1]))\n    sb_spr[a,3] = N_spr[a,3] * wt_mature[a] * exp(-spawn_fract * (M + F40 * slx[a,1]))\n    sb_spr[a,4] = N_spr[a,4] * wt_mature[a] * exp(-spawn_fract * (M + F35 * slx[a,1]))\n  }\n  \n  # spr reference points\n  SB0 = sum(sb_spr[,1])\n  SBF50 = sum(sb_spr[,2])\n  SBF40 = sum(sb_spr[,3])\n  SBF35 = sum(sb_spr[,4])\n  \n  # spr penalities\n  sprpen = 100. * (SBF50 / SB0 - 0.5)^2\n  sprpen = sprpen + 100. * (SBF40 / SB0 - 0.4)^2\n  sprpen = sprpen + 100. * (SBF35 / SB0 - 0.35)^2\n  \n  # scale spr reference points\n  B0 = SB0 * pred_rec\n  B40 = SBF40 * pred_rec\n  B35 = SBF35 * pred_rec\n  \n  # likelihood/penalties --------------------\n  # like_rec = sum(log_Rt^2) / (2 * sigmaR^2) + length(log_Rt) * log(sigmaR) * wt_rec_var\n  # like_rec = sum((c(log_Rt, init_log_Rt) + sigmaR * sigmaR / 2)^2) / (2 * sigmaR^2)\n  like_rec = sum((c(log_Rt, init_log_Rt) + sigmaR * sigmaR / 2)^2) / (2 * sigmaR^2) * wt_rec_var\n  f_regularity = wt_fmort_reg * sum(log_Ft^2)\n  \n  nll = 0.0\n  nll = nll + ssqcatch\n  nll = nll + like_srv\n  nll = nll + like_fish_age\n  nll = nll + like_srv_age\n  nll = nll + like_fish_size\n  nll = nll + like_rec \n  nll = nll + f_regularity\n  nll = nll + nll_M\n  nll = nll + nll_q\n  nll = nll + nll_sigmaR\n  nll = nll + sprpen\n  \n  # reports -------------------\n  RTMB::REPORT(ages)\n  RTMB::REPORT(years)\n  RTMB::REPORT(M)\n  RTMB::REPORT(a50C)\n  RTMB::REPORT(deltaC)\n  RTMB::REPORT(a50S)\n  RTMB::REPORT(deltaS)\n  RTMB::REPORT(q)\n  RTMB::REPORT(sigmaR)\n  RTMB::REPORT(log_mean_R)\n  RTMB::REPORT(log_Rt)\n  RTMB::REPORT(log_mean_F)\n  RTMB::REPORT(log_Ft)\n  RTMB::REPORT(waa)\n  RTMB::REPORT(maa)\n  RTMB::REPORT(wt_mature)\n  RTMB::REPORT(yield_ratio)\n  RTMB::REPORT(Fat)\n  RTMB::REPORT(Zat)\n  RTMB::REPORT(Sat)\n  RTMB::REPORT(Cat)\n  RTMB::REPORT(Nat)\n  RTMB::REPORT(slx)\n  RTMB::REPORT(Ft)\n  RTMB::REPORT(catch_pred)\n  RTMB::REPORT(srv_pred)\n  \n  RTMB::REPORT(fish_age_pred)\n  RTMB::REPORT(srv_age_pred)\n  RTMB::REPORT(fish_size_pred)\n  \n  RTMB::REPORT(tot_bio)\n  RTMB::REPORT(spawn_bio)\n  RTMB::REPORT(recruits)\n  RTMB::ADREPORT(tot_bio)\n  RTMB::ADREPORT(spawn_bio)\n  RTMB::ADREPORT(recruits)\n  RTMB::REPORT(spawn_fract)\n  RTMB::REPORT(B0)\n  RTMB::REPORT(B40)\n  RTMB::REPORT(B35)\n  RTMB::REPORT(F35)\n  RTMB::REPORT(F40)\n  RTMB::REPORT(F50)\n  RTMB::REPORT(pred_rec)\n  RTMB::REPORT(stdev_rec)\n  \n  RTMB::REPORT(ssqcatch)\n  RTMB::REPORT(like_srv)\n  RTMB::REPORT(like_fish_age)\n  RTMB::REPORT(like_srv_age)\n  RTMB::REPORT(like_fish_size)\n  RTMB::REPORT(like_rec)\n  RTMB::REPORT(f_regularity)\n  RTMB::REPORT(sprpen)\n  RTMB::REPORT(nll_q)\n  RTMB::REPORT(nll_M)\n  RTMB::REPORT(nll_sigmaR)\n  RTMB::REPORT(nll)\n  # nll = 0.0\n  return(nll)\n}"
  },
  {
    "objectID": "rtmb.html#running-the-model",
    "href": "rtmb.html#running-the-model",
    "title": "RTMB model",
    "section": "Running the model",
    "text": "Running the model\n\n\nCode\n# load ----\nlibrary(RTMB)\nlibrary(tidyverse)\nlibrary(Matrix)\nlibrary(tmbstan)\nlibrary(shinystan)\nlibrary(here)\nlibrary(scico)\ntheme_set(theme_bw())\n# devtools::install_github('Cole-Monnahan-NOAA/adnuts', ref='sparse_M')\nlibrary(adnuts)\n# install.packages('StanEstimators', repos = c('https://andrjohns.r-universe.dev', 'https://cloud.r-project.org'))\nlibrary(StanEstimators)\n\nsource(here::here('r', 'bridge_data.r')) # data inputs used in ADMB .dat\nsource(here::here('r', 'bridge_pars.r')) # parameter outputs from ADMB .pars\nsource(here::here('r', 'utils.r')) # functions for processing data\nREP &lt;- readLines(here::here('data', 'admb', \"nr.rep\")) # ADMB .rep file\nPAR &lt;- readLines(here::here('data', 'admb', \"nr.par\")) # ADMB .par file\n# load data in list form\ndata &lt;- list(\n             ages = ages,\n             years = years,\n             length_bins = 15:45,\n             waa = waa,\n             maa = maa,\n             wt_mature = maa * waa / 2, # females only\n             spawn_mo = 5,\n             catch_ind = rep(1, length(years)),\n             catch_obs = catch_obs,\n             catch_wt = c(rep(5, 17), rep(50, 45)),\n             srv_obs = srv_obs,\n             srv_ind = srv_ind,\n             srv_sd = srv_sd,\n             srv_wt = 0.25,\n             fish_age_obs = fish_age_obs,\n             fish_age_ind = fish_age_ind,\n             fish_age_iss = fish_age_iss,\n             fish_age_wt = 0.5,\n             srv_age_obs = srv_age_obs,\n             srv_age_ind = srv_age_ind,\n             srv_age_iss = srv_age_iss,\n             srv_age_wt = 0.5,\n             fish_size_obs = fish_size_obs,\n             fish_size_ind = fish_size_ind,\n             fish_size_iss = fish_size_iss,\n             fish_size_wt = 0.5,\n             age_error = age_error,\n             size_age = size_age,\n             wt_fmort_reg = 0.1,\n             wt_rec_var = 1,\n             mean_M = 0.06,\n             cv_M = 0.05,\n             mean_q = 1,\n             cv_q = 0.45,\n             mean_sigmaR = 1.5,\n             cv_sigmaR = 0.01,\n             yield_ratio = yield_ratio\n)\n\n# list of pars from ADMB model\npars = list(log_M = log_M,\n            log_a50C = log_a50C,\n            deltaC = deltaC,\n            log_a50S = log_a50S,\n            deltaS = deltaS,\n            log_q = log_q,\n            log_mean_R = log_mean_R,\n            init_log_Rt = init_log_Rt,\n            log_Rt = log_Rt,\n            log_mean_F = log_mean_F,\n            log_Ft =  log_Ft,\n            log_F35 = log_F35,\n            log_F40 = log_F40,\n            log_F50 = log_F50,\n            sigmaR = sigmaR)\n\n# mapping holds values fixed\nmap = list(log_M = factor(NA),\n           log_a50C = factor(NA),\n           deltaC = factor(NA),\n           log_a50S = factor(NA),\n           deltaS = factor(NA),\n           log_q = factor(NA),\n           log_mean_R = factor(NA),\n           init_log_Rt = factor(rep(NA, length(init_log_Rt))),\n           log_Rt = factor(rep(NA, length(log_Rt))),\n           log_mean_F = factor(NA),\n           log_Ft = factor(rep(NA, length(log_Ft))),\n           log_F35 = factor(NA),\n           log_F40 = factor(NA),\n           log_F50 = factor(NA),\n           sigmaR = factor(NA))"
  },
  {
    "objectID": "rtmb.html#build-the-model-object",
    "href": "rtmb.html#build-the-model-object",
    "title": "RTMB model",
    "section": "Build the model object",
    "text": "Build the model object\nThis run is not optimized it is simply a comparison run to evaluate output results are the same as those from the ADMB model.\n\n\nCode\nobj &lt;- RTMB::MakeADFun(f, \n                        pars, \n                        map = map)  \n\nreport &lt;- obj$report(obj$env$last.par.best)\nsaveRDS(report, file = here::here('data', 'rtmb', 'report.rds'))\n\n# some comparisons - values match up well\nproj_bio(report)\nREP[grep('spawn_biom', REP) + 1]\nREP[grep('tot_biom', REP) + 1]\nREP[grep('ABC', REP)[1] + 1] # F40\nREP[grep('ABC', REP)[3] + 1] # ABC catch - 2023\nREP[grep('ABC', REP)[4] + 1] # ABC catch - 20234\nREP[grep('OFL', REP)[1] + 1] # FOFL\nREP[grep('OFL', REP)[3] + 1] # FOFL catch - 2023\nREP[grep('OFL', REP)[4] + 1] # FOFL catch - 2024\nREP[grep('q_trawl', REP) + 1] # q\nreport$q\nREP[grep('nat_mort', REP) + 1] # q\nreport$M\nREP[grep('B40', REP) + 1]\nreport$B40\nREP[grep('B_zero', REP) + 1] # B0\nreport$B0"
  },
  {
    "objectID": "rtmb.html#estimate-the-rtmb-model",
    "href": "rtmb.html#estimate-the-rtmb-model",
    "title": "RTMB model",
    "section": "Estimate the RTMB model",
    "text": "Estimate the RTMB model\nFreely examine the RTMB model run with same starting points and parameter limits as implemented in the ADMB model.\n\n\nCode\n# parameter starting values\npars2 = list(log_M = log(0.06),\n             log_a50C = log(7.5),\n             deltaC = 3.0,\n             log_a50S = log(7.3),\n             deltaS = 3.8,\n             log_q = log(1),\n             log_mean_R = 4.3,\n             init_log_Rt = rep(0, length(pars$init_log_Rt)),\n             log_Rt = rep(0, length(years)),\n             log_mean_F = 0,\n             log_Ft =  rep(0, length(years)),\n             log_F35 = 0,\n             log_F40 = 0,\n             log_F50 = 0,\n             sigmaR = 1.5)\n\n# parameter bounds - same as ADMB\nlower = c(-Inf, # log M\n          -Inf, #log a50C\n          -Inf, # delta C\n          -Inf, # log_a50S\n          -Inf, # delta S\n          -Inf, # logq\n          -15, # log mean R\n          rep(-10, length(pars2$init_log_Rt)), # init rec devs\n          rep(-10, length(years)), # rec devs\n          -15, # log mean F\n          rep(-15, length(years)), # Fdevs\n          rep(-4.605,3)) # Fspr\n          \n\nupper = c(Inf, # log M\n          Inf, #log a50C\n          Inf, # delta C\n          Inf, # log_a50S\n          Inf, # delta S\n          Inf, # logq\n          10, # log mean R\n          rep(10,  length(pars2$init_log_Rt)), # init rec devs\n          rep(10, length(years)), # rec devs\n          15, # log mean F\n          rep(15, length(years)), # Fdevs\n          rep(0,3)) # Fspr\n\n\nRun the model and save the output.\n\n\nCode\nobj1 &lt;- RTMB::MakeADFun(f, \n                        pars2,\n                        map = list(sigmaR = factor(NA)),\n                        silent = TRUE)  \n\nfit1 &lt;- nlminb(start = obj1$par,\n               objective = obj1$fn,\n               gradient = obj1$gr,\n               control = list(iter.max=100000,\n                              eval.max=20000),\n               upper = upper,\n               lower=lower)\nreport1 &lt;- obj1$report(obj1$env$last.par.best)\nsaveRDS(report1, file = here::here('data', 'rtmb', 'report1.rds'))"
  },
  {
    "objectID": "comps.html",
    "href": "comps.html",
    "title": "Age and size compositions",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\ntheme_set(theme_bw())\n# data ----\nsource(here::here('r', 'bridge_data.r'))\ndata.frame(age = ages,\n             year = readRDS(here::here('data', 'rtmb', 'report1.rds'))$fish_age_pred,\n             groups = 'rtmb') -&gt; df\n\nnames(df) &lt;- c('age', fish_age_yrs, 'groups')\nread.csv(here::here('data', 'admb', 'fac.csv')) %&gt;% \n  mutate(groups = ifelse(groups=='pred', 'admb', groups)) %&gt;% \n  bind_rows(df %&gt;% \n             tidyr::pivot_longer(-c(age, groups), names_to = 'year') %&gt;% \n      mutate(year = as.numeric(year))) %&gt;% \n  ggplot(aes(age, value, color = groups, linetype=groups)) + \n  geom_point() + \n  geom_line() +\n  facet_wrap(~year) +\n  scico::scale_color_scico_d(palette = 'roma', end = 0.8) +\n  scale_linetype_manual(values = c(0,1,1), guide = guide_none()) -&gt; f1\n\nggplotly(f1)"
  },
  {
    "objectID": "comps.html#fishery-age-composition",
    "href": "comps.html#fishery-age-composition",
    "title": "Age and size compositions",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\ntheme_set(theme_bw())\n# data ----\nsource(here::here('r', 'bridge_data.r'))\ndata.frame(age = ages,\n             year = readRDS(here::here('data', 'rtmb', 'report1.rds'))$fish_age_pred,\n             groups = 'rtmb') -&gt; df\n\nnames(df) &lt;- c('age', fish_age_yrs, 'groups')\nread.csv(here::here('data', 'admb', 'fac.csv')) %&gt;% \n  mutate(groups = ifelse(groups=='pred', 'admb', groups)) %&gt;% \n  bind_rows(df %&gt;% \n             tidyr::pivot_longer(-c(age, groups), names_to = 'year') %&gt;% \n      mutate(year = as.numeric(year))) %&gt;% \n  ggplot(aes(age, value, color = groups, linetype=groups)) + \n  geom_point() + \n  geom_line() +\n  facet_wrap(~year) +\n  scico::scale_color_scico_d(palette = 'roma', end = 0.8) +\n  scale_linetype_manual(values = c(0,1,1), guide = guide_none()) -&gt; f1\n\nggplotly(f1)"
  },
  {
    "objectID": "comps.html#survey-age-composition",
    "href": "comps.html#survey-age-composition",
    "title": "Age and size compositions",
    "section": "Survey age composition",
    "text": "Survey age composition\n\n\nCode\n# data ----\ndata.frame(age = ages,\n             year = readRDS(here::here('data', 'rtmb', 'report1.rds'))$srv_age_pred,\n             groups = 'rtmb') -&gt; df\n\nnames(df) &lt;- c('age', srv_age_yrs, 'groups')\nread.csv(here::here('data', 'admb', 'sac.csv')) %&gt;% \n  mutate(groups = ifelse(groups=='pred', 'admb', groups)) %&gt;% \n  bind_rows(df %&gt;% \n             tidyr::pivot_longer(-c(age, groups), names_to = 'year') %&gt;% \n      mutate(year = as.numeric(year))) %&gt;% \n  ggplot(aes(age, value, color = groups, linetype=groups)) + \n  geom_point() + \n  geom_line() +\n  facet_wrap(~year) +\n  scico::scale_color_scico_d(palette = 'roma', end = 0.8) +\n  scale_linetype_manual(values = c(0,1,1), guide = guide_none()) -&gt; f1\n\nggplotly(f1)"
  },
  {
    "objectID": "comps.html#fishery-size-composition",
    "href": "comps.html#fishery-size-composition",
    "title": "Age and size compositions",
    "section": "Fishery size composition",
    "text": "Fishery size composition\n\n\nCode\n# data ----\ndata.frame(length = length_bins,\n             year = readRDS(here::here('data', 'rtmb', 'report1.rds'))$fish_size_pred,\n             groups = 'rtmb') -&gt; df\n\nnames(df) &lt;- c('length', fish_size_yrs, 'groups')\nread.csv(here::here('data', 'admb', 'fsc.csv')) %&gt;% \n  mutate(groups = ifelse(groups=='pred', 'admb', groups)) %&gt;% \n  bind_rows(df %&gt;% \n             tidyr::pivot_longer(-c(length, groups), names_to = 'year') %&gt;% \n      mutate(year = as.numeric(year))) %&gt;% \n  ggplot(aes(length, value, color = groups, linetype=groups)) + \n  geom_point() + \n  geom_line() +\n  facet_wrap(~year) +\n  scico::scale_color_scico_d(palette = 'roma', end = 0.8) +\n  scale_linetype_manual(values = c(0,1,1), guide = guide_none()) -&gt; f1\n\nggplotly(f1)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Survey biomass",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "catch.html",
    "href": "catch.html",
    "title": "Fishery catch",
    "section": "",
    "text": "Comparing model outputs of fishery catch.\n\n\nCode\n# load ----\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\ntheme_set(theme_bw())\n\n# data ----\ncatch = read.csv(here::here('data', 'admb', 'catch.csv')) %&gt;% \n  rename(admb_2022 = pred) %&gt;% \n  mutate(year = 1961:2022) %&gt;% \n  left_join(data.frame(year = 1961:2022,\n                       rtmb_2022 = readRDS(here::here('data', 'rtmb', 'report1.rds'))$catch_pred))\n\ncatch %&gt;% \n  tidyr::pivot_longer(c(rtmb_2022, admb_2022), names_to='model') %&gt;% \nggplot(aes(year, obs)) +\n  geom_point(color='gray') +\n  expand_limits(y=0) +\n  scale_y_continuous(labels = scales::comma) +\n  geom_line(aes(y = value, color = model)) +\n  scico::scale_color_scico_d(palette = 'roma') +\n  xlab('Year') + \n  ylab('Biomass (t)') -&gt; p1\n\nggplotly(p1)%&gt;% \n  layout(legend = list( x = 0.75, y = .75))\n\n\n\n\n\nFigure 1. Fishery catch inputs (gray) and model outputs are shown for the 2022 ADMB and RTMB models.\n\n\n\n\n\nCode\ncatch %&gt;% \n  mutate(diff = (admb_2022 - rtmb_2022) / admb_2022) %&gt;% \n  ggplot(aes(year, diff)) + \n  geom_point() +\n  geom_hline(yintercept = 0, lty=3, alpha = 0.5) +\n  scale_y_continuous(labels = scales::percent) +\n  xlab('Year') +\n  ylab('Percent difference') -&gt; p2\n\nggplotly(p2) \n\n\n\n\n\nFigure 2. Percent difference in model estimates of fishery catch."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GOA northern rockfish",
    "section": "",
    "text": "This website is supplemental material for the 2024 Stock Assessment and Fishery Evaluation (SAFE). Should results herein deviate from those presented in the SAFE, please refer to the SAFE as the final values."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "GOA northern rockfish",
    "section": "",
    "text": "This website is supplemental material for the 2024 Stock Assessment and Fishery Evaluation (SAFE). Should results herein deviate from those presented in the SAFE, please refer to the SAFE as the final values."
  },
  {
    "objectID": "index.html#bridging-from-admb-to-rtmb",
    "href": "index.html#bridging-from-admb-to-rtmb",
    "title": "GOA northern rockfish",
    "section": "Bridging from ADMB to RTMB",
    "text": "Bridging from ADMB to RTMB\nThe ADMB program is in the process of an ‘orderly shutdown of development’ (see: ADMB) and TMB (Template Model Builder) is a viable alternative for fishery stock assessment development. TMB is widely seen as the successor to ADMB. RTMB allows for accessing most of the utility found in TMB but the models can be written entirely in R rather than C++ [@Kristensen2024].\nTo compare model outputs the last full model accepted by the SSC for northern rockfish with the model and data changes presented at the September 2024 Groundfish Plan Team Model 22.1b was converted to RTMB code (Model 24). Model 22.1b has historically had a tight prior on M (mean 0.06, CV 0.05), and fixed \\(\\sigma^r\\) at 1.5.\nModel 22.1b parameters outputs were used as fixed parameter inputs for Model 24 for an initial comparison. Additionally, Model 24 was run using the same parameter inputs and bounds (not fixed) as Model 22.1b, these results are presented as model Model 24.a for reporting purposes."
  },
  {
    "objectID": "survey_bio.html",
    "href": "survey_bio.html",
    "title": "Survey biomass",
    "section": "",
    "text": "Comparing model outputs of survey biomass.\n\n\nCode\n# load ----\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\ntheme_set(theme_bw())\n\n# data ----\n# obs data \nsource(here::here('r', 'bridge_data.r'))\n# admb model output\nadmb = read.csv(here::here('data', 'admb', 'survey.csv')) \n# rtmb model output\nreport1 = readRDS(here::here('data', 'rtmb', 'report1.rds'))\n\ndata.frame(year = srv_yrs,\n           biomass = srv_obs,\n           sd_2022 = srv_sd,\n           rtmb_2022 = report1$srv_pred,\n           admb_2022 = admb$pred) %&gt;% \n  mutate(lci_2022 = biomass - 1.96 * sd_2022,\n         uci_2022 = biomass + 1.96 * sd_2022) %&gt;% \n  tidyr::pivot_longer(c(rtmb_2022, admb_2022), names_to='model') %&gt;% \nggplot(aes(year, biomass)) +\n  geom_point(color='gray') +\n  geom_errorbar(aes(ymin = lci_2022, ymax = uci_2022), width=.2, color='gray') +\n  expand_limits(y=0) +\n  scale_y_continuous(labels = scales::comma) +\n  geom_line(aes(y = value, color = model)) +\n  scico::scale_color_scico_d(palette = 'roma') +\n  xlab('Year') + \n  ylab('Biomass (t)') -&gt; p1\n\nggplotly(p1)\n\n\n\n\n\nFigure 1. Survey biomass inputs (VAST-based w/lognormal error structure) and confidence intervals (gray). Model outputs are shown for the 2022 ADMB and RTMB models.\n\n\n\n\n\n\n\n\n\nFiltering figures\n\n\n\nOne can click on the model names in the legend to add/remove from the figure."
  }
]